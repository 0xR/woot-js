{"version":3,"sources":["woot/wchar.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;qBAkBc,OAAO;;;;0BACP,aAAa;;;;AAE3B,IAAM,aAAa,GAAG;AACpB,UAAQ,EAAE,wBAAE,QAAQ,CAAC,mBAAE,EAAE,CAAC,MAAM,CAAC,CAAC;AAClC,OAAK,EAAE,wBAAE,QAAQ,CAAC,mBAAE,EAAE,CAAC,MAAM,CAAC,CAAC;CAChC,CAAC;;AAEF,IAAM,WAAW,GAAG;AAClB,IAAE,EAAE,wBAAE,QAAQ,CAAC,wBAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;AACzC,WAAS,EAAE,wBAAE,QAAQ,CAAC,mBAAE,EAAE,CAAC,OAAO,CAAC,CAAC;AACpC,OAAK,EAAE,wBAAE,QAAQ,CAAC,mBAAE,EAAE,CAAC,MAAM,CAAC,CAAC;AAC/B,QAAM,EAAE,wBAAE,QAAQ,CAAC,wBAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;AAC7C,QAAM,EAAE,wBAAE,QAAQ,CAAC,wBAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;CAC9C,CAAC;;AAEF,IAAM,SAAS,GAAG,wBAAE,eAAe,CAAC,WAAW,CAAC,CAAC;;AAEjD,IAAM,gBAAgB,GAAG,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC;AAClD,IAAM,aAAa,GAAG,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC;;;;;AAK/C,IAAM,cAAc,GAAG,SAAS,CAAC;AAC/B,IAAE,EAAE,gBAAgB;AACpB,WAAS,EAAE,KAAK;AAChB,OAAK,EAAE,GAAG;AACV,QAAM,EAAE,gBAAgB;AACxB,QAAM,EAAE,aAAa;CACtB,CAAC,CAAC;;;;;AAMH,IAAM,WAAW,GAAG,SAAS,CAAC;AAC5B,IAAE,EAAE,aAAa;AACjB,WAAS,EAAE,KAAK;AAChB,OAAK,EAAE,GAAG;AACV,QAAM,EAAE,gBAAgB;AACxB,QAAM,EAAE,aAAa;CACtB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBA+BY;AACb,WAAS,EAAT,SAAS;AACT,gBAAc,EAAd,cAAc;AACd,aAAW,EAAX,WAAW;CACZ","file":"woot/wchar.js","sourcesContent":["// module Data.Woot.WChar\n//     ( WChar(..)\n//     , wCharBeginning\n//     , wCharEnding\n//     , hide\n//     , ClientId\n//     , WCharId(..)\n//     ) where\n//\n//\n// data WChar = WChar\n//     { wCharId      :: WCharId\n//     , wCharVisible :: Bool\n//     , wCharAlpha   :: Char\n//     , wCharPrevId  :: WCharId\n//     , wCharNextId  :: WCharId\n//     } deriving (Eq, Show)\n\nimport R from 'ramda';\nimport V from 'o-validator';\n\nconst wCharIdSchema = {\n  clientId: V.required(R.is(Number)),\n  clock: V.required(R.is(Number))\n};\n\nconst wCharSchema = {\n  id: V.required(V.validate(wCharIdSchema)),\n  isVisible: V.required(R.is(Boolean)),\n  alpha: V.required(R.is(String)),\n  prevId: V.required(V.validate(wCharIdSchema)),\n  nextId: V.required(V.validate(wCharIdSchema))\n};\n\nconst makeWChar = V.validateOrThrow(wCharSchema);\n\nconst wCharIdBeginning = {clientId: -1, clock: 0};\nconst wCharIdEnding = {clientId: -1, clock: 1};\n\n// -- special character to mark the beginning of a wString\n// -- note: clientId of -1 denotes a special character generated by this library\n// -- includes a self-referential 'prevId' field\nconst wCharBeginning = makeWChar({\n  id: wCharIdBeginning,\n  isVisible: false,\n  alpha: ' ',\n  prevId: wCharIdBeginning,\n  nextId: wCharIdEnding\n});\n\n\n// -- special character to mark the ending of a wString\n// -- note: clientId of -1 denotes a special character generated by this library\n// -- includes a self-referential 'nextId' field\nconst wCharEnding = makeWChar({\n  id: wCharIdEnding,\n  isVisible: false,\n  alpha: ' ',\n  prevId: wCharIdBeginning,\n  nextId: wCharIdEnding\n});\n\n//\n// hide :: WChar -> WChar\n// hide wc = wc {wCharVisible = False}\n//\n//\n// type ClientId = Int\n//\n//\n// data WCharId = WCharId\n//     { wCharIdClientId :: ClientId\n//     , wCharIdClock    :: Int\n//     } deriving (Eq, Show)\n//\n//\n// instance Ord WCharId where\n//     compare = compareCharIds\n//\n//\n// compareCharIds :: WCharId -> WCharId -> Ordering\n// compareCharIds (WCharId cA iA) (WCharId cB iB) = compare (cA, iA) (cB, iB)\n//\n//\n// wCharIdBeginning :: WCharId\n// wCharIdBeginning = WCharId (-1) 0\n//\n//\n// wCharIdEnding :: WCharId\n// wCharIdEnding = WCharId (-1) 1\n\nexport default {\n  makeWChar,\n  wCharBeginning,\n  wCharEnding\n};\n"],"sourceRoot":"/source/"}