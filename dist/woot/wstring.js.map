{"version":3,"sources":["woot/wstring.js"],"names":[],"mappings":"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","file":"woot/wstring.js","sourcesContent":["import R from 'ramda';\n\nimport WChar from './wchar';\n\n\nconst isDefined = R.complement(R.isNil);\n\n\n// updateIdCache :: WCharId -> WString -> WString\nconst updateIdCache = ({clientId, clock}, wString) => {\n  const cache = wString.__idCache || {};\n\n  // a little mutation here\n  // but it's worth it for the performance boosts\n  cache[clientId] = cache[clientId] || {};\n  cache[clientId][clock] = true;\n\n  wString.__idCache = cache;\n\n  return wString;\n};\n\n\n// hacky way to stop standard array ops from removing cache\n// TODO: redo wString data type\nconst withIdCache = (fn, wString) => {\n  const newString = fn(wString);\n  newString.__idCache = wString.__idCache;\n  return newString;\n};\n\n\n\n// makeWStringFromWChars :: [WChar] -> WString\nconst makeWStringFromWChars = (chars) => {\n  const wString = R.insertAll(1, chars, [WChar.wCharBeginning, WChar.wCharEnding]);\n  wString.__idCache = {};\n  return R.reduce((s, {id}) => updateIdCache(id, s), wString, wString);\n};\n\n\n// makeEmptyWString :: WString\nconst makeEmptyWString = () => {\n  return makeWStringFromWChars([]);\n};\n\n\n// show :: WString -> String\nconst show = (wString) => {\n  let i = 0;\n  let str = '';\n\n  for (; i < wString.length; i++) {\n    if (wString[i].isVisible) {\n      str += wString[i].alpha;\n    }\n  }\n\n  return str;\n};\n\n\n// -- insert before index i\n// -- insert 2 'x' \"abc\" -> abxc\n// insert :: Int -> WChar -> WString -> WString\nconst insert = (i, wChar, wString) => {\n  return updateIdCache(\n    wChar.id, withIdCache(R.insert(i, wChar), wString)\n  );\n};\n\n\nconst isInCache = ({clientId, clock}, wString) => {\n  return R.path(['__idCache', clientId, clock], wString) !== undefined;\n};\n\n\n// indexOf :: WCharId -> WString -> Int | null\nconst indexOf = (id, wString) => {\n  // TODO: use 'contains' first once that is more reliable\n  if (isInCache(id, wString)) {\n    return R.findIndex((wChar) => {\n      return WChar.compareWCharIds(id, wChar.id) === 0;\n    }, wString);\n  }\n\n  return null;\n};\n\n\n// contains :: WCharId -> WString -> Bool\nconst contains = (id, wString) => {\n  return isInCache(id, wString);\n};\n\n\n// subsection :: WCharId -> WCharId -> WString -> WString\nconst subsection = (idA, idB, wString) => {\n  const indexA = indexOf(idA, wString);\n  const indexB = indexOf(idB, wString);\n\n  if (isDefined(indexA) && isDefined(indexB) && (indexA < indexB)) {\n    return withIdCache(R.slice(indexA + 1, indexB), wString);\n  }\n\n  return [];\n};\n\n\n// nthVisible :: Int -> WString -> WChar | null\nconst nthVisible = (i, wString) => {\n  let numFound = 0;\n  let j = 0;\n\n  if (i > wString.length) {\n    return null;\n  }\n\n  for (; numFound < i + 1; j++) {\n    if (!wString[j]) {\n      return null;\n    }\n\n    if (wString[j].isVisible) {\n      numFound++;\n    }\n  }\n\n  return wString[j - 1];\n};\n\n\n// hideChar :: WCharId -> WString -> WString\nconst hideChar = (id, wString) => {\n  const index = indexOf(id, wString);\n  const wChar = WChar.hide(wString[index]);\n\n  return index ? withIdCache(R.update(index, wChar), wString) : wString;\n};\n\n\nexport default {\n  // Construction\n  makeEmptyWString,\n  makeWStringFromWChars,\n\n  // General WString operations\n  show,\n  indexOf,\n  insert,\n  subsection,\n  contains,\n  nthVisible,\n\n  // Special utilities\n  hideChar\n};\n"],"sourceRoot":"/source/"}