{"version":3,"sources":["woot/core.js"],"names":[],"mappings":"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","file":"woot/core.js","sourcesContent":["import R from 'ramda';\n\n\nimport WString from './wstring';\nimport WChar from './wchar';\n\n\n// matchOperationType :: {OperationType: *} -> (Operation -> * | Error)\nconst matchOperationType = (dict) => {\n  return (...args) => {\n    const type = R.path(['0', 'type'], args);\n    if (R.has(type, dict)) {\n      return R.prop(type, dict).apply(null, args);\n    }\n\n    throw new Error('Invalid operation type: ' + type);\n  };\n};\n\n\n// canIntegrate :: Operation -> WString -> Bool\nconst canIntegrate = matchOperationType({\n  insert: ({wChar}, wString) => {\n    const containsPrev = WString.contains(wChar.prevId, wString);\n    const containsNext = WString.contains(wChar.nextId, wString);\n    return containsPrev && containsNext;\n  },\n  'delete': ({wChar}, wString) => {\n    return WString.contains(wChar.id, wString);\n  }\n});\n\n\n// integrateInsert :: WCharId -> WCharId -> WChar -> WString -> WString\nconst integrateInsert = (prevId, nextId, wChar, wString) => {\n  if (WString.contains(wChar.id, wString)) {\n    return wString;\n  }\n\n  const subsection = WString.subsection(prevId, nextId, wString);\n\n  if (R.isEmpty(subsection)) {\n    const index = WString.indexOf(nextId, wString);\n    return WString.insert(index, wChar, wString);\n  }\n\n  // if the current char id is less than the previous id\n  if (WChar.compareWCharIds(wChar.id, prevId) === -1) {\n    const index = WString.indexOf(prevId, wString);\n    return WString.insert(index, wChar, wString);\n  }\n\n  // recurse to integrateInsert with next id in the subsection\n  const newPrevId = R.head(subsection).id;\n  return integrateInsert(newPrevId, nextId, wChar, wString);\n};\n\n\n// integrateDelete :: WChar -> WString -> WString\nconst integrateDelete = ({id}, wString) => {\n  return WString.hideChar(id, wString);\n};\n\n\n// integrateOp :: Operation -> WString -> WString\nconst integrateOp = matchOperationType({\n  insert: ({wChar}, wString) => {\n    return integrateInsert(wChar.prevId, wChar.nextId, wChar, wString);\n  },\n  'delete': ({wChar}, wString) => {\n    return integrateDelete(wChar, wString);\n  }\n});\n\n\n// integrate :: Operation -> WString -> WString | null\nconst integrate = (operation, wString) => {\n  return canIntegrate(operation, wString) ? integrateOp(operation, wString) : null;\n};\n\n\n// iterate through operation list until stable\n// return any remaining operations, along with new string\n// integrateAll :: [Operation] -> WString -> {operations: [Operation], wString: WString}\nconst integrateAll = (initialOps, initialWString) => {\n  // no operations have been integrated\n  // and wString is in it's initial value\n  const initialState = {operations: [], wString: initialWString};\n\n  const integrate_ = ({operations, wString}, op) => {\n    const newString = integrate(op, wString);\n    return newString\n      ? {operations, wString: newString}\n      : {operations: R.append(op, operations), wString};\n  };\n\n  const {operations, wString} = R.reduce(integrate_, initialState, initialOps);\n\n  const operationsAreStable = R.length(initialOps) === R.length(operations);\n  return operationsAreStable ? {operations, wString} : integrateAll(operations, wString);\n};\n\n\nexport default {\n  integrate,\n  integrateAll\n};\n"],"sourceRoot":"/source/"}