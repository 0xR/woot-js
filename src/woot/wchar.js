// module Data.Woot.WChar
//     ( WChar(..)
//     , wCharBeginning
//     , wCharEnding
//     , hide
//     , ClientId
//     , WCharId(..)
//     ) where
//
//
// data WChar = WChar
//     { wCharId      :: WCharId
//     , wCharVisible :: Bool
//     , wCharAlpha   :: Char
//     , wCharPrevId  :: WCharId
//     , wCharNextId  :: WCharId
//     } deriving (Eq, Show)

import R from 'ramda';
import V from 'o-validator';

const wCharIdSchema = {
  clientId: V.required(R.is(Number)),
  clock: V.required(R.is(Number))
};

const wCharSchema = {
  id: V.required(V.validate(wCharIdSchema)),
  isVisible: V.required(R.is(Boolean)),
  alpha: V.required(R.is(String)),
  prevId: V.required(V.validate(wCharIdSchema)),
  nextId: V.required(V.validate(wCharIdSchema))
};

const makeWChar = V.validateOrThrow(wCharSchema);

const wCharIdBeginning = {clientId: -1, clock: 0};
const wCharIdEnding = {clientId: -1, clock: 1};

// -- special character to mark the beginning of a wString
// -- note: clientId of -1 denotes a special character generated by this library
// -- includes a self-referential 'prevId' field
const wCharBeginning = makeWChar({
  id: wCharIdBeginning,
  isVisible: false,
  alpha: ' ',
  prevId: wCharIdBeginning,
  nextId: wCharIdEnding
});


// -- special character to mark the ending of a wString
// -- note: clientId of -1 denotes a special character generated by this library
// -- includes a self-referential 'nextId' field
const wCharEnding = makeWChar({
  id: wCharIdEnding,
  isVisible: false,
  alpha: ' ',
  prevId: wCharIdBeginning,
  nextId: wCharIdEnding
});

//
// hide :: WChar -> WChar
// hide wc = wc {wCharVisible = False}
//
//
// type ClientId = Int
//
//
// data WCharId = WCharId
//     { wCharIdClientId :: ClientId
//     , wCharIdClock    :: Int
//     } deriving (Eq, Show)
//
//
// instance Ord WCharId where
//     compare = compareCharIds
//
//
// compareCharIds :: WCharId -> WCharId -> Ordering
// compareCharIds (WCharId cA iA) (WCharId cB iB) = compare (cA, iA) (cB, iB)
//
//
// wCharIdBeginning :: WCharId
// wCharIdBeginning = WCharId (-1) 0
//
//
// wCharIdEnding :: WCharId
// wCharIdEnding = WCharId (-1) 1

export default {
  makeWChar,
  wCharBeginning,
  wCharEnding
};
