import R from 'ramda';


// makeWCharId :: {k: a} -> WCharId
const makeWChar = R.identity;


// makeWCharId :: Int -> Int -> WCharId
const makeWCharId = (clientId, clock) => {
  return {clientId, clock};
};


// wCharIdBeginning :: WCharId
const wCharIdBeginning = makeWCharId(-1, 0);


// wCharIdEnding :: WCharId
const wCharIdEnding = makeWCharId(-1, 1);


// -- special character to mark the beginning of a wString
// -- note: clientId of -1 denotes a special character generated by this library
// -- includes a self-referential 'prevId' field
// wCharBeginning :: WCharId
const wCharBeginning = makeWChar({
  id: wCharIdBeginning,
  isVisible: false,
  alpha: ' ',
  prevId: wCharIdBeginning,
  nextId: wCharIdEnding
});


// -- special character to mark the ending of a wString
// -- note: clientId of -1 denotes a special character generated by this library
// -- includes a self-referential 'nextId' field
// wCharEnding :: WCharId
const wCharEnding = makeWChar({
  id: wCharIdEnding,
  isVisible: false,
  alpha: ' ',
  prevId: wCharIdBeginning,
  nextId: wCharIdEnding
});


// hide :: WChar -> WChar
const hide = R.assoc('isVisible', false);


// compareCharIds :: WCharId -> WCharId -> Ordering (-1, 0, 1)
const compareWCharIds = (idA, idB) => {
  if (idA.clientId === idB.clientId) {
    if (idA.clock === idB.clock) {
      return 0;
    }

    return idA.clock < idB.clock ? -1 : 1;
  }

  return idA.clientId < idB.clientId ? -1 : 1;
};


export default {
  makeWChar,
  makeWCharId,
  wCharBeginning,
  wCharEnding,
  hide,
  compareWCharIds
};
